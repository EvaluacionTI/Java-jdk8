# INTERNALIZACIÓN

#1. Cuales de los siguientes algoritmos de clasificación tiene la mejor complejidad de tiempo de 
	ejecución asintótica.
	
	Bubble sort
	Heap sort
	Selection sort
	Insertion sort

	Análisis
	:::
		Bubble sort.- La Ordenación de burbuja (Bubble Sort en inglés) es un sencillo algoritmo de 
			ordenamiento. Funciona revisando cada elemento de la lista que va a ser ordenada con el
			siguiente, intercambiándolos de posición si están en el orden equivocado. 
			Es necesario revisar varias veces toda la lista hasta que no se necesiten más 
			intercambios, lo cual significa que la lista está ordenada. 
			Este algoritmo obtiene su nombre de la forma con la que suben por la lista los 
			elementos durante los intercambios, como si fueran pequeñas "burbujas". También es 
			conocido como el método del intercambio directo. Dado que solo usa comparaciones para 
			operar elementos, se lo considera un algoritmo de comparación, siendo uno de los más 
			sencillos de implementar.
		
			La complejidad de la clasificación de burbujas es O (nlog n), lo que la convierte en una 
			opción menos frecuente para organizar en orden ordenado cuando la cantidad de números es 
			alta.
			
		Heap sort.- Es un algoritmo de ordenamiento no recursivo.
			Este algoritmo consiste en almacenar todos los elementos del vector a ordenar en un 
			montículo (heap), y luego extraer el nodo que queda como nodo raíz del montículo (cima) 
			en sucesivas iteraciones obteniendo el conjunto ordenado. Basa su funcionamiento en una 
			propiedad de los montículos, por la cual, la cima contiene siempre el menor elemento (o
			el mayor, según se haya definido el montículo) de todos los almacenados en él. El 
			algoritmo, después de cada extracción, recoloca en el nodo raíz o cima, la última hoja 
			por la derecha del último nivel. Lo cual destruye la propiedad heap del árbol. Pero, a 
			continuación realiza un proceso de "descenso" del número insertado de forma que se elige
			a cada movimiento el mayor de sus dos hijos, con el que se intercambia. Este 
			intercambio, realizado sucesivamente "hunde" el nodo en el árbol restaurando la 
			propiedad montículo del árbol y dejando paso a la siguiente extracción del nodo raíz.
		
			Tenga en cuenta que, en datos reales, Quicksort suele ser más eficaz que Heap Sort. El 
			lado positivo es que Heap Sort siempre tiene una complejidad de tiempo O (n log n) en el
			peor de los casos. A pesar de que la complejidad del tiempo es O (n log n) , en la 
			mayoría de los casos, no es el mejor algoritmo para datos del mundo real.
		
		Selection Sort.- El ordenamiento por selección (Selection Sort en inglés) es un algoritmo 
			de ordenamiento que requiere O {(n^{2})} operaciones para ordenar una lista de n 
			elementos.
		
			Su funcionamiento es el siguiente:

				1. Buscar el mínimo elemento de la lista
				2. Intercambiarlo con el primero
				3. Buscar el siguiente mínimo en el resto de la lista
				4. Intercambiarlo con el segundo
				5. Y en general:
				
				Buscar el mínimo elemento entre una posición i y el final de la lista
				Intercambiar el mínimo con el elemento de la posición i
						
			Este algoritmo mejora ligeramente el algoritmo de la burbuja. En el caso de tener que 
			ordenar un vector de enteros, esta mejora no es muy sustancial, pero cuando hay que 
			ordenar un vector de estructuras más complejas.
			Este algoritmo realiza muchas menos operaciones intercambiar() que el de la burbuja, 
			por lo que lo mejora en algo. 
		
			Otra desventaja de este algoritmo respecto a otros como el de burbuja o de inserción
			directa es que no mejora su rendimiento cuando los datos ya están ordenados o 
			parcialmente ordenados
		
		Insertion sort .- El ordenamiento por inserción (insertion sort en inglés) es una manera 
			muy natural de ordenar para un ser humano, y puede usarse fácilmente para ordenar un
			mazo de cartas numeradas en forma arbitraria. Requiere O(n²) operaciones para ordenar
			una lista de n elementos.
		
			Este algoritmo no es adecuado para grandes conjuntos de datos, ya que su complejidad 
			promedio y en el peor de los casos es de Ο (n 2 ), donde n es el número de elementos.
			Este algoritmo es útil para ordenar una pequeña cantidad de elementos
			Se vuelve ineficiente cuando se ordenan secuencias de entrada que tienen más de 100
			elementos. 

	Rpta: Selection Sort, Bubble Sort, Insertion Sort, Heap Sort

## 2. Implementar una clase interface y su implementación para efectuar una suma, resta, multiplicacion y divisón de enteros
	:::
	public interface CL0201v01OperacionBasicaSumRestMulDiv {
		int suma(int piNumero1, int piNumero2);
		int resta(int piNumero1, int piNumero2);
		int multiplicacion(int piMultiplicando, int piMultiplicador);
		int division(int piDividendo, int piDivisor);
	}
	
	public class CM0201v01OperacionBasica implements CL0201v01OperacionBasicaSumRestMulDiv{

		@Override
		public int suma(int piNumero1, int piNumero2) {
			return piNumero1 + piNumero2;
		}
	
		@Override
		public int resta(int piNumero1, int piNumero2) {
			return (piNumero1 - piNumero2);
		}
	
		@Override
		public int multiplicacion(int piMultiplicando, int piMultiplicador) {
			return (piMultiplicando * piMultiplicador);
		}
	
		@Override
		public int division(int piDividendo, int piDivisor) {
			return (piDividendo / piDivisor);
		}
	}
	
	
	:::

## 3.- Multiple Choise

	Cuál de las siguientes afirmaciones es cierta sobre la sobrecarga y la anulación
	
	Elige las opciones correctas
	
	       El tipo de retorno del método de anulación puede ser diferente del método anulado 
		   siempre que el nuevo tipo de retorno sea asignable al tipo de retorno del metodo que se
		   reemplaza.
	[RPTA] Los métodos privados y finales no pueden ser sobrecargados.
		   La anulación ocurre en tiempo de compilación.
	[RPTA] La sobrecarga ocurre en tiempo de compilación.

	Diferencias entre overload and override

	Overload es la sobrecarga de metodos, es que en una misma clase puedas tener dos metodos que se
		llamen de la misma forma pero que se diferiencen a traves de la cantidad de parametros.
	
	Override es sobrescritura de metodos es utilizado cuando heredados los metodos de una clase y un 
		metodo lo redefines en la clase hija esto tiene mas importancia cuando lo combinas con el 
		polimorfismo.
			 
		La sobreescritura sucede cuando tu heredas una clase o cuando implementas una interfaz
		En el caso de herencia, es obligatorio sobreescribir los métodos de una superclase si estos
		son abstractos, si no son abstractos, es opcional sobreescribirlos; pero generalmente así 
		sucede para dar un comportamiento polimórfico.

		En el caso de una clase que implemente una interfaz, es obligatorio sobreescribir los 
		métodos de la interfaz, siempre y cuando estos no sean default, ya que por defecto, los 
		métodos  de una interfaz son públicos y abstractos.

	Por otro lado tenemos los métodos "Sobreescritos", estos, son métodos pertenecientes a la clase
	"padre" de una Herencia, los cuales son declarados en la clase "hija" para modificar algún tipo
	de comportamiento más específico.
	
	Estos métodos han de tener:

        La misma lista de argumentos
        El mismo tipo de devolución
        El nivel de visibilidad del método debe ser igual o menos restrictivo al que sobrescribe. 
            Los modificadores de acceso de menor a mayor visibilidad son:
                Private
                Default
                Protected
                Public
        No se pueden declarar nuevas "Excepciones" (Ya veremos este tema) en el método sobrescrito, 
		aunque si se pueden declarar nuevas "Excepciones" que sean subclases de las Excepciones que
		lance el método sobrescrito.
        Métodos declarados como "final" o "private" NO pueden ser "sobreescritos"

	Método de sobrecarga:
		El método de sobrecarga se utiliza para aumentar la legibilidad del programa. 
		La sobrecarga de métodos se realiza dentro de la clase. 
		En caso de sobrecarga del método, el parámetro debe ser diferente. 
		La sobrecarga de métodos es el ejemplo del polimorfismo de tiempo de compilación. 
		En java, la sobrecarga de métodos no se puede realizar cambiando solo el tipo de retorno del
		método. El tipo de retorno puede ser igual o diferente en la sobrecarga de métodos. Pero 
		debes tener que cambiar el parámetro. 

	Método Anulando:
		La anulación del método se utiliza para proporcionar la implementación específica del 
		método que ya está provisto por su superclase.
		La anulación del método se produce en dos clases que tienen una relación IS-A (herencia).
		En caso de anulación del método, el parámetro debe ser el mismo.
		La anulación del método es el ejemplo del polimorfismo de tiempo de ejecución. 
		El tipo de devolución debe ser igual o covariante en la invalidación del método.

## 4.- Java8: Collections
	Cuál de las siguientes afirmaciones son ciertas acerca de ArrayList y Vector en Java?

	Elige una de las opciones
		   El vector puede ser redimensionado mientras que ArrayList no puede ser
	[RPTA] Vector está sincronizado mientras que ArrayList no está
	       Los ArrayList pueden crecer pero no pueden reducir su tamano, mientras que Vector 
		   puede aumentar y disminuir
	       Los vectores permiten valores duplicados mientras que ArrayList no lo hace

	El vector está sincronizado (synchronized), por tanto, su contenido está protegido de otros
	hilos, es decir, es thread-safe. ArrayList no está sincronizado y por tanto no son thread-safe,
	pero podemos sincronizar una ArrayList por Collections.synchronizedList (aList)
	Las colecciones sincronizadas son una pérdida de tiempo y peligrosas
	Hay que tener en cuenta esto porque los vectores tienen un coste en tiempo de ejecución que no 
	tienen los ArrayList. Si no necesitas thead-safe, usa ArrayList.
	
	Tamaño de los datos:
	Ambas estructuras necesitan un Array para almacenar los datos internamente. Cuando se insertan 
	datos, tanto unos como otros tienen que crecer para que no haya un desbordamiento. He aquí la
	diferencia:
	Los vectores crecen duplicando su espacio
	Los ArrayList crecen añadiendo el 50% de su espacio anterior.

	Por defecto ArrayList<E> y Vector<E> utilizan arrays con capacidad para 10 elementos. Cuando el
	número de elementos sobrepasa la capacidad disponibleVector<E> dobla el tamaño del array 
	interno, mientras que ArrayList<E> utiliza la fórmula (capacidad * 3) / 2 + 1.

## 5.- Abstract Classes

	Cuál de las siguientes afirmaciones es cierta acerca de las clases abstractas
	
	Elige las opciones correctas
	
	       Las clases abstractas pueden usarse como cualquier otra clase
	[RPTA] Las clases abstractas deben ser declaradas con la palabra clave abstract
	[RPTA] Las clases abstractas no pueden ser instanciadas
	[RPTA] Una clase que contenga al menos un método abstracto será una clase abstracta	
	
	? Que es una clase abstract y método abstract ?
	En Java se dice que son clases abstractas aquellas clases base (superclases) de las que no se
	permite la creación de objetos. Para ello, se utiliza la palabra clave abstract.

	Para que una clase sea abstracta la condición es que al menos uno de sus métodos sea abstracto
	(se le agrega la palabra reservada abstract y no se especifica el cuerpo del método)

	Una clase abstracta no se puede instanciar pero si se puede heredar y las clases hijas serán
	las encargadas de agregar la funcionalidad a los métodos abstractos. Si no lo hacen así, 
	las clases hijas deben ser también abstractas
	
	Métodos abstractos : 
		En una clase abstracta es posible definir métodos abstractos, los cuales se caracterizan
		por el hecho de que no pueden ser implementados en la clase base. De ellos, solo se escribe
		su signatura en la superclase, y su funcionalidad –polimórfica– tiene que indicarse en las 
		clases derivadas (subclases)

	Una clase "interface" es  una clase abstracta pura en la que todos sus métodos son abstractos
	y por tanto no se pueden implementar en la clase Interface
	
## 6. Crear una excepción personalizada para mostrar la validación de password actual y el nuevo password.
   Así mismo que la longitud mínima debe ser de 5 caracteres.
   
   :::
	public class CU0601v01PasswordExcepcion extends Exception{
		// 1 generar una variable para reconocer en el runtime el id de esta clase
		private static final long SERIAL_VERSION_UID = 700L;
	
		// 2 Con este metodo lo que se hace es que se llama a esta clase excepcion con el mensaje enviado
		public CU0601v01PasswordExcepcion(String psMensaje){
			super(psMensaje);
		}
	}
	
	public class CU0602v01ValidarPassword {
		private static final String EX_PASS_NO_IGUAL = "Los campos de password no son iguales";
		private static final String EX_PASS_LONGITUD = "El password no cumple la longitud mínima";
		
		public CU0602v01ValidarPassword(){}
		
		public boolean validarPassword(String psPassword, String psRePassword) throws CU0601v01PasswordExcepcion{
			if (!psPassword.equals(psRePassword)){
				throw new CU0601v01PasswordExcepcion(EX_PASS_NO_IGUAL);
			}
	
			if (psPassword.length()<5){
				throw new CU0601v01PasswordExcepcion(EX_PASS_LONGITUD);
			}
			return true;
		}
	}	
	
	public class CV0601v01ConsultaVerificarPasswordWithExcepcion {

		public static void main(String[] args) {
			String sUsuario, sPassword, sRePassword;
			
			sUsuario = "Illari";
			sPassword = "22082014";
			sRePassword = "220814";
			
			CU0602v01ValidarPassword  oCUValidar= new CU0602v01ValidarPassword();
			
			try{
				System.out.println("Usuario : " + sUsuario);
				oCUValidar.validarPassword(sPassword, sRePassword);
			}catch(CU0601v01PasswordExcepcion ex){
				//ex.printStackTrace();
				System.out.println("No se puede registrar un usuario debido a : " + ex.getMessage());
			}finally{
				System.out.println("Terminado satisfactoriamente");
			}
		}
	}
   :::
   
## 7. Crear una excepción personalizada para mostrar la validación 
		USER_NOT_AUTHORIZED = "Usuario no autorizado";
		INVALID_AMOUNT = "Cantidad debe ser mayor a cero";
		INSUFFICIENT_BALANCE = "Saldo insuficiente";   

	:::
	public class CU0701v01TransactionException extends Exception {
		private final String errorMensaje;
		private final String errorCode;
		
		CU0701v01TransactionException(String psErrorMensaje, String psErrorCode) {
			this.errorMensaje = psErrorMensaje;
			this.errorCode = psErrorCode;
		}
		
		public String getErrorCode() {
			return errorCode;
		}
		
		public String getErrorMensaje() {
			return errorMensaje;
		}
	}	

	public class CU0702v01DigitalWalletTransaction {
		private static final String USER_NOT_AUTHORIZED = "Usuario no autorizado";
		private static final String INVALID_AMOUNT = "Cantidad debe ser mayor a cero";
		private static final String INSUFFICIENT_BALANCE = "Saldo insuficiente";
    
		public void addMoney(CE0701v01DigitalWallet digitalWallet, int amount) throws CU0701v01TransactionException{
			if (digitalWallet.getUserAccessToken()==null){
				throw new CU0701v01TransactionException("Usuario no autorizado", USER_NOT_AUTHORIZED);
			}
			
			if (amount <=0){
				throw new CU0701v01TransactionException("Cantidad debe ser mayor a cero", INVALID_AMOUNT);
			}
			
			if (digitalWallet.getWalletBalance()<amount){
				throw new CU0701v01TransactionException("Saldo insuficiente", INSUFFICIENT_BALANCE);
			}        
		}
    
		public void payMoney(CE0701v01DigitalWallet digital, int amount) throws CU0701v01TransactionException{
			
			if (digital.getUserAccessToken()==null){
				throw new CU0701v01TransactionException("Usuario no autorizado", USER_NOT_AUTHORIZED);
			}
			
			if (amount <=0){
				throw new CU0701v01TransactionException("Cantidad debe ser mayor a cero", INVALID_AMOUNT);
			}
			
			if (digital.getWalletBalance()<amount){
				throw new CU0701v01TransactionException("Saldo insuficiente", INSUFFICIENT_BALANCE);
			}
		}
	}
	
	public class CV0701v01DigitalWalletTransaction {

		public static void main(String[] args) {
			CU0702v01DigitalWalletTransaction oValidar = new CU0702v01DigitalWalletTransaction();
			CE0701v01DigitalWallet oDigitalToken = new CE0701v01DigitalWallet();
			CE0701v01DigitalWallet oDigital = new CE0701v01DigitalWallet();
			oDigitalToken.setUserAccessToken("15172027");
			
			oDigital.setUserAccessToken("");
			oDigital.setWalletBalance(300);
			
			try{
				oValidar.addMoney(oDigitalToken, 100);
				oValidar.addMoney(oDigitalToken, -1000);
				
				oValidar.payMoney(oDigital, 0);
				oValidar.payMoney(oDigital, 100);
				
			}catch(CU0701v01TransactionException ex){
			System.out.println("Transacción evaluada : " + ex.getErrorCode() + ex.getErrorMensaje());
			}
		}
	}
	:::

## 13. Java: Threads

	What is the output of the following Java snippet

	class CM0201SampleDemo implements Runnable{
		private Thread t;
		private String threadName;
		
		CM0201SampleDemo(String threadName){
			this.threadName = threadName;
		}
	
		@Override
		public void run() {
			while(true)
				System.out.println(threadName);
		}
		
		public void start(){
			if (t==null){
				t = new Thread(this, threadName);
				t.start();
			}
		}
	}
	
	public class CV0201EvaluarThread {
	
		public static void main(String[] args) {
			CM0201SampleDemo A = new CM0201SampleDemo("A");
			CM0201SampleDemo B = new CM0201SampleDemo("B");
			
			B.start();
			A.start();
		}
	}
	
	Pick one of the choices
	
			ABABABAB...(pattern repeats)
			BABABABA...(pattern repeats)
			AABAABAA...(pattern repeats)
	[RPTA]  A pattern cannot be predicted and can vary each time the program is run


## 14. Consider the following three class
	
	class A{}
	class B extends A{} 
	class C extends B{}
	
	Consider an object of class B is instantiated, i.e.
	
	B b = new B();
	
	Which of the followind boolean expresiones evaluates to true
	Pick the correct choices
	
	[RPTA] (b instancedof B)	
		   (b instancedof B) && (!(b instancedof A))
			(b instancedof B) && (!(b instancedof C))
			None of the above
	
	
	
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		